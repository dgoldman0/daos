// scripts/deploy.js
async function main() {
    // Get accounts from web3
    const accounts = await web3.eth.getAccounts();
    const deployer = accounts[0];
    
    console.log("Deploying contracts with the account:", deployer);

    // Get contract JSON artifacts (these are usually generated by Remix after compilation)
    const repairPotionArtifact = await artifacts.readArtifact("RepairPotion");
    const rewardPoolNFTArtifact = await artifacts.readArtifact("RewardPoolNFT");
    const paymentManagerArtifact = await artifacts.readArtifact("PaymentManager");
    const claimManagerArtifact = await artifacts.readArtifact("ClaimManager");

    // Deploy RepairPotion
    const RepairPotion = new web3.eth.Contract(repairPotionArtifact.abi);
    const repairPotion = await RepairPotion.deploy({ data: repairPotionArtifact.bytecode })
        .send({ from: deployer, gas: 5000000 });
    console.log("RepairPotion deployed to:", repairPotion.options.address);

    // Deploy RewardPoolNFT
    const RewardPoolNFT = new web3.eth.Contract(rewardPoolNFTArtifact.abi);
    const rewardPoolNFT = await RewardPoolNFT.deploy({ data: rewardPoolNFTArtifact.bytecode })
        .send({ from: deployer, gas: 5000000 });
    console.log("RewardPoolNFT deployed to:", rewardPoolNFT.options.address);

    // Deploy PaymentManager
    const rewardToken = "0x0000000000000000000000000000000000000000"; // Native token (e.g., ETH)
    const rewardRate = web3.utils.toWei("0.001", "ether"); // Reward rate
    const specialRewardRate = web3.utils.toWei("0.001", "ether"); // Special reward rate
    const min_claims = 1; // Minimum number of claims required to finalize a period

    const PaymentManager = new web3.eth.Contract(paymentManagerArtifact.abi);
    const paymentManager = await PaymentManager.deploy({
        data: paymentManagerArtifact.bytecode,
        arguments: [rewardPoolNFT.options.address, rewardToken, rewardRate, specialRewardRate, min_claims]
    }).send({ from: deployer, gas: 5000000 });
    console.log("PaymentManager deployed to:", paymentManager.options.address);

    // Deploy ClaimManager
    const claimerLimit = 25; // Maximum number of claimants in a period
    const claimPeriod = 300; // Claim period in seconds (e.g., 5 minutes)
    const min_health = 128; // Minimum health required to claim rewards

    const ClaimManager = new web3.eth.Contract(claimManagerArtifact.abi);
    const claimManager = await ClaimManager.deploy({
        data: claimManagerArtifact.bytecode,
        arguments: [rewardPoolNFT.options.address, repairPotion.options.address, paymentManager.options.address, claimerLimit, claimPeriod, min_health]
    }).send({ from: deployer, gas: 5000000 });
    console.log("ClaimManager deployed to:", claimManager.options.address);

    // Set contract addresses in the deployed contracts
    // Set claimManager in RewardPoolNFT
    await rewardPoolNFT.methods.setClaimManager(claimManager.options.address)
        .send({ from: deployer });
    console.log("Set claimManager in RewardPoolNFT");

    // Set claimManager in PaymentManager
    await paymentManager.methods.setClaimManager(claimManager.options.address)
        .send({ from: deployer });
    console.log("Set claimManager in PaymentManager");

    // Set managerContract in RepairPotion
    await repairPotion.methods.setManagerContract(claimManager.options.address)
        .send({ from: deployer });
    console.log("Set managerContract in RepairPotion");

    // Mint initial NFTs using ownerMint function
    await rewardPoolNFT.methods.ownerMint(10) // Mint 10 NFTs
        .send({ from: deployer });
    console.log("Minted 10 initial NFTs to owner");
}

main()
    .then(() => console.log("Deployment script completed successfully"))
    .catch((error) => {
        console.error("An error occurred during deployment:", error);
    });